import { Course, Lesson } from "@/types/course";

// Cursos baseados nas funcionalidades do pr√≥prio Projeto
// Emojis https://emojipedia.org/ ou https://getemoji.com/
export const COURSES: Course[] = [
  {
    id: "1",
    title: "Onboarding e Navega√ß√£o",
    description: "Crie telas de boas-vindas e navega√ß√£o com Expo Router",
    icon: "üöÄ",
    color: "#9C27B0",
    totalLessons: 4,
  },
  {
    id: "2",
    title: "Componentes Personalizados",
    description: "Desenvolva componentes reutiliz√°veis Button e Card",
    icon: "üé®",
    color: "#FF5722",
    totalLessons: 3,
  },
  {
    id: "3",
    title: "Perfil e AsyncStorage",
    description: "Implemente sistema de perfil com armazenamento local",
    icon: "üë§",
    color: "#4CAF50",
    totalLessons: 5,
  },
  {
    id: "4",
    title: "Sistema de Cursos",
    description: "Construa lista de cursos, li√ß√µes e quest√µes",
    icon: "üìö",
    color: "#2196F3",
    totalLessons: 4,
  },
];

export const LESSONS: Lesson[] = [
  // CURSO 1: Onboarding e Navega√ß√£o
  {
    id: "1-1",
    courseId: "1",
    title: "Configura√ß√£o do Expo Router",
    description: "Configure navega√ß√£o baseada em arquivos",
    order: 1,
    questions: [
      {
        id: "1-1-1",
        question:
          "O Expo Router √© uma biblioteca de navega√ß√£o que usa a estrutura de pastas para criar rotas automaticamente. Para criar uma navega√ß√£o em pilha (stack), precisamos importar o componente correto. Qual componente devemos importar?",
        code: `import { [BLANK] } from 'expo-router';

export default function App() {
  return <Stack />;
}`,
        options: ["Stack", "Router", "Screen", "Navigator"],
        correctAnswer: 0,
      },
      {
        id: "1-1-2",
        question:
          "No React Native com Expo Router, para navegar entre telas usamos o objeto 'router'. Quando queremos adicionar uma nova tela na pilha de navega√ß√£o (permitindo voltar com o bot√£o), qual m√©todo devemos usar?",
        code: `import { router } from 'expo-router';

const handlePress = () => {
  router.[BLANK]('/home');
};`,
        options: ["push", "redirect", "navigate", "go"],
        correctAnswer: 0,
      },
      {
        id: "1-1-3",
        question:
          "O Expo Router usa conven√ß√£o de pastas para criar rotas. Para criar uma navega√ß√£o por abas (tabs) na parte inferior da tela, usamos uma pasta especial. Qual o nome correto dessa pasta?",
        code: `// Estrutura de pastas para criar tabs:
app/
  [BLANK]/
    _layout.tsx
    index.tsx
    profile.tsx`,
        options: ["(tabs)", "{tabs}", "tabs", "[tabs]"],
        correctAnswer: 0,
      },
    ],
  },
  {
    id: "1-2",
    courseId: "1",
    title: "Tela de Onboarding",
    description: "Crie uma tela de boas-vindas atrativa",
    order: 2,
    questions: [
      {
        id: "1-2-1",
        question:
          "No React Native, para exibir texto na tela precisamos usar um componente espec√≠fico (diferente de HTML que usa tags como <p> ou <span>). Qual componente devemos importar do 'react-native' para mostrar texto?",
        code: `import { View, [BLANK] } from 'react-native';

export default function Onboarding() {
  return (
    <View>
      <Text>Bem-vindo ao Merge Skills!</Text>
    </View>
  );
}`,
        options: ["Paragraph", "Text", "Label", "Title"],
        correctAnswer: 1,
      },
      {
        id: "1-2-2",
        question:
          "Ap√≥s o usu√°rio ver a tela de boas-vindas, queremos lev√°-lo para a tela principal do app. Precisamos SUBSTITUIR a tela de onboarding (n√£o permitir voltar), pois o onboarding s√≥ deve aparecer uma vez. Qual m√©todo usar?",
        code: `import { router } from 'expo-router';

const handleStart = () => {
  // Vai para tela de tabs e remove onboarding do hist√≥rico
  router.[BLANK]('/(tabs)');
};`,
        options: ["navigate", "replace", "redirect", "push"],
        correctAnswer: 1,
      },
      {
        id: "1-2-3",
        question:
          "Criamos um componente Button personalizado no projeto para reutilizar em v√°rias telas. Para usar esse componente customizado (n√£o o nativo), qual √© a sintaxe correta em JSX?",
        code: `import Button from '@/components/Button';

export default function Onboarding() {
  return (
    <View>
      <Text>Bem-vindo!</Text>
      <[BLANK]
        title="Come√ßar"
        onPress={handleStart}
      />
    </View>
  );
}`,
        options: ["Pressable", "Link", "Button", "TouchableOpacity"],
        correctAnswer: 2,
      },
    ],
  },
  {
    id: "1-3",
    courseId: "1",
    title: "Rotas Din√¢micas",
    description: "Aprenda a criar rotas com par√¢metros",
    order: 3,
    questions: [
      {
        id: "1-3-1",
        question:
          "Quando temos v√°rias telas semelhantes (ex: detalhes de diferentes cursos), n√£o criamos um arquivo para cada uma. Usamos rotas din√¢micas que recebem um par√¢metro (ID). Como nomeamos o arquivo para criar a rota '/courses/123' onde 123 √© vari√°vel?",
        code: `// Queremos criar rotas din√¢micas:
// /courses/1, /courses/2, /courses/3, etc.
app/
  courses/
    [BLANK].tsx`,
        options: ["[id]", ":id", "{id}", "<id>"],
        correctAnswer: 0,
      },
      {
        id: "1-3-2",
        question:
          "Quando o usu√°rio acessa '/courses/123', precisamos capturar o valor '123' para buscar os dados corretos. O Expo Router oferece um Hook (fun√ß√£o especial do React) para isso. Qual Hook devemos usar?",
        code: `import { [BLANK] } from 'expo-router';

export default function CourseDetail() {
  const { id } = useLocalSearchParams();
  // Agora 'id' cont√©m o valor da URL (ex: "123")
  return <View><Text>Curso {id}</Text></View>;
}`,
        options: ["useRouter", "useRoute", "useParams", "useLocalSearchParams"],
        correctAnswer: 3,
      },
      {
        id: "1-3-3",
        question:
          "Para melhorar a experi√™ncia do usu√°rio, queremos mudar o t√≠tulo que aparece no topo da tela (header) baseado no conte√∫do exibido. Qual componente do Stack usamos dentro da tela para configurar o header?",
        code: `import { Stack } from 'expo-router';

export default function Screen() {
  return (
    <>
      <Stack.[BLANK] options={{ title: 'Detalhes do Curso' }} />
      <View>
        {/* Conte√∫do da tela */}
      </View>
    </>
  );
}`,
        options: ["Header", "Navigator", "Title", "Screen"],
        correctAnswer: 3,
      },
    ],
  },
  {
    id: "1-4",
    courseId: "1",
    title: "Tab Navigation",
    description: "Configure navega√ß√£o por abas",
    order: 4,
    questions: [
      {
        id: "1-4-1",
        question:
          "A navega√ß√£o por abas (tabs) √© comum em apps mobile, mostrando √≠cones na parte inferior da tela. No Expo Router, qual componente devemos importar para criar esse tipo de navega√ß√£o no arquivo _layout.tsx?",
        code: `import { [BLANK] } from 'expo-router';

export default function TabLayout() {
  return <Tabs />;
}`,
        options: ["Tabs", "TabBar", "TabNavigator", "BottomTabs"],
        correctAnswer: 0,
      },
      {
        id: "1-4-2",
        question:
          "Para cada aba (tab) queremos mostrar um √≠cone que representa a funcionalidade (ex: casa para Home, pessoa para Perfil). Qual propriedade das options recebe uma fun√ß√£o que retorna o componente de √≠cone?",
        code: `<Tabs.Screen
  name="index"
  options={{
    title: 'Home',
    [BLANK]: ({ color }) => <Icon name="home" color={color} />,
  }}
/>`,
        options: ["iconComponent", "tabIcon", "tabBarIcon", "icon"],
        correctAnswer: 2,
      },
      {
        id: "1-4-3",
        question:
          "Para personalizar a apar√™ncia das tabs, podemos mudar cores, fontes e estilos. Quando queremos aplicar um estilo customizado √† barra de tabs inteira (n√£o apenas a uma aba), qual propriedade das options devemos usar no componente Tabs?",
        code: `<Tabs
  screenOptions={{
    [BLANK]: {
      backgroundColor: '#1a1a1a',
      borderTopWidth: 0,
      height: 60,
    },
  }}
>`,
        options: ["navigationStyle", "barStyle", "tabBarStyle", "tabStyle"],
        correctAnswer: 2,
      },
    ],
  },

  // CURSO 2: Componentes Personalizados
  {
    id: "2-1",
    courseId: "2",
    title: "Componente Button",
    description: "Crie um bot√£o reutiliz√°vel",
    order: 1,
    questions: [
      {
        id: "2-1-1",
        question:
          "Ao criar um componente Button reutiliz√°vel, precisamos definir quais propriedades ele aceita. Uma das props mais importantes √© 'onPress' - a fun√ß√£o que ser√° executada ao clicar. No TypeScript, como definimos o tipo de uma fun√ß√£o que n√£o recebe par√¢metros e n√£o retorna nada?",
        code: `interface ButtonProps {
  title: string;
  onPress: [BLANK];  // Tipo da fun√ß√£o de callback
  disabled?: boolean;
}`,
        options: ["void", "Function", "function", "() => void"],
        correctAnswer: 3,
      },
      {
        id: "2-1-2",
        question:
          "Quando criamos um componente, recebemos as props como par√¢metro. Para facilitar o uso, podemos 'desestruturar' o objeto de props, extraindo cada propriedade diretamente. Qual √© a sintaxe correta para desestrutura√ß√£o com TypeScript?",
        code: `export default function Button([BLANK]) {
  // Agora podemos usar title e onPress diretamente
  return (
    <TouchableOpacity onPress={onPress}>
      <Text>{title}</Text>
    </TouchableOpacity>
  );
}`,
        options: [
          "{ title, onPress }: ButtonProps",
          "(title, onPress)",
          "title, onPress",
          "props: ButtonProps",
        ],
        correctAnswer: 0,
      },
      {
        id: "2-1-3",
        question:
          "No React Native, TouchableOpacity √© o componente usado para criar bot√µes clic√°veis. Quando o usu√°rio pressiona o bot√£o, queremos executar uma a√ß√£o (fun√ß√£o). Qual prop do TouchableOpacity recebe a fun√ß√£o callback que ser√° chamada ao tocar?",
        code: `<TouchableOpacity
  style={styles.button}
  [BLANK]={handlePress}  // Fun√ß√£o executada ao clicar
>
  <Text style={styles.text}>{title}</Text>
</TouchableOpacity>`,
        options: ["onClick", "onTap", "onTouch", "onPress"],
        correctAnswer: 3,
      },
    ],
  },
  {
    id: "2-2",
    courseId: "2",
    title: "Componente Card",
    description: "Desenvolva um card flex√≠vel",
    order: 2,
    questions: [
      {
        id: "2-2-1",
        question:
          "O Card √© um componente 'container' que pode receber outros componentes dentro dele (filhos/children). No React com TypeScript, qual √© o tipo correto para representar 'qualquer conte√∫do React v√°lido' (texto, componentes, etc)?",
        code: `import { [BLANK] } from 'react';

interface CardProps {
  children: ReactNode;  // Aceita texto, componentes, arrays, etc
}`,
        options: ["Component", "ReactNode", "ReactElement", "React"],
        correctAnswer: 1,
      },
      {
        id: "2-2-2",
        question:
          "Nem todas as props precisam ser obrigat√≥rias. Uma prop 'title' pode ser opcional - se fornecida, mostramos; se n√£o, apenas renderizamos o children. No TypeScript, como tornamos uma propriedade opcional?",
        code: `interface CardProps {
  title[BLANK]: string;  // title √© opcional
  children: ReactNode;   // children √© obrigat√≥rio
}`,
        options: ["!", "|", ":", "?"],
        correctAnswer: 3,
      },
      {
        id: "2-2-3",
        question:
          "Queremos mostrar um t√≠tulo opcional no Card. Se a prop 'title' foi fornecida, renderizamos um componente Text com ela; se n√£o foi fornecida, n√£o mostramos nada. Qual √© a forma correta de renderiza√ß√£o condicional em JSX?",
        code: `export default function Card({ title, children }: CardProps) {
  return (
    <View style={styles.container}>
      [BLANK]
      {children}
    </View>
  );
}`,
        options: [
          "if (title) <Text>{title}</Text>",
          "<Text>{title || ''}</Text>",
          "{title && <Text>{title}</Text>}",
          "{title ? <Text>{title}</Text>}",
        ],
        correctAnswer: 2,
      },
    ],
  },
  {
    id: "2-3",
    courseId: "2",
    title: "Card Reutiliz√°vel Avan√ßado",
    description: "Adicione slots e customiza√ß√£o",
    order: 3,
    questions: [
      {
        id: "2-3-1",
        question:
          "Para tornar nosso Card mais visual e organizado, queremos aplicar estilos (cores, espa√ßamentos, bordas, etc). No React Native, usamos StyleSheet para criar estilos otimizados. Qual m√©todo do StyleSheet usamos para definir m√∫ltiplos estilos de uma vez?",
        code: `import { StyleSheet } from 'react-native';

const styles = StyleSheet.[BLANK]({
  container: {
    padding: 16,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
});`,
        options: ["style", "define", "make", "create"],
        correctAnswer: 3,
      },
      {
        id: "2-3-2",
        question:
          "No React Native, para criar layouts flex√≠veis usamos Flexbox. Quando queremos que os elementos filhos fiquem organizados em uma linha (horizontalmente), qual valor usamos na propriedade flexDirection?",
        code: `const styles = StyleSheet.create({
  container: {
    flexDirection: '[BLANK]',  // Organiza filhos horizontalmente
    alignItems: 'center',
    gap: 8,
  },
});`,
        options: ["row", "horizontal", "inline", "flex-row"],
        correctAnswer: 0,
      },
      {
        id: "2-3-3",
        question:
          "No React Native, quando queremos aplicar m√∫ltiplos estilos a um componente, podemos usar um array de estilos. Isso permite combinar estilos fixos com estilos din√¢micos ou condicionais. Qual √© a sintaxe correta para aplicar m√∫ltiplos estilos?",
        code: `<View 
  style={[BLANK]}
>
  <Text>Conte√∫do do Card</Text>
</View>`,
        options: [
          "[styles.container, styles.shadow]",
          "(styles.container, styles.shadow)",
          "styles.container + styles.shadow",
          "{styles.container, styles.shadow}",
        ],
        correctAnswer: 0,
      },
    ],
  },

  // CURSO 3: Perfil e AsyncStorage
  {
    id: "3-1",
    courseId: "3",
    title: "Interface de Perfil",
    description: "Defina tipos para dados do usu√°rio",
    order: 1,
    questions: [
      {
        id: "3-1-1",
        question:
          "Antes de armazenar dados do perfil do usu√°rio, precisamos definir sua estrutura (quais campos existem e seus tipos). No TypeScript, qual palavra-chave √© mais adequada para definir a estrutura de um objeto de dados?",
        code: `// Definindo a estrutura dos dados de perfil
export [BLANK] Profile {
  name: string;      // Nome do usu√°rio
  email: string;     // Email do usu√°rio
  bio?: string;      // Biografia (opcional)
  avatar?: string;   // URL da foto (opcional)
}`,
        options: ["type", "const", "class", "interface"],
        correctAnswer: 3,
      },
      {
        id: "3-1-2",
        question:
          "Criamos a interface Profile em um arquivo separado ('@/types/profile'). Para usar esse tipo em outro arquivo, precisamos import√°-lo. Qual a sintaxe correta de importa√ß√£o?",
        code: `import { [BLANK] } from '@/types/profile';

export default function ProfileScreen() {
  const [profile, setProfile] = useState<Profile>();
}`,
        options: ["Profile", "{ Profile }", "Profile as type", "type Profile"],
        correctAnswer: 0,
      },
      {
        id: "3-1-3",
        question:
          "Vamos usar useState para gerenciar os dados do perfil. Inicialmente n√£o temos dados (usu√°rio n√£o est√° logado), mas depois teremos um objeto Profile. Como definir o tipo para aceitar 'Profile' ou 'undefined'?",
        code: `// Estado pode come√ßar undefined e depois ter um Profile
const [profile, setProfile] = useState[BLANK];`,
        options: [
          "<Profile?>",
          "<Profile | undefined>",
          "<Profile>",
          "<Profile | null>",
        ],
        correctAnswer: 1,
      },
    ],
  },
  {
    id: "3-2",
    courseId: "3",
    title: "AsyncStorage - Salvamento",
    description: "Persista dados localmente",
    order: 2,
    questions: [
      {
        id: "3-2-1",
        question:
          "AsyncStorage √© como um 'banco de dados simples' que salva informa√ß√µes no dispositivo do usu√°rio (n√£o na nuvem). Os dados persistem mesmo se o app for fechado. Para usar AsyncStorage no React Native, precisamos instal√°-lo. Qual √© o pacote oficial da comunidade?",
        code: `import AsyncStorage from '[BLANK]';

const saveProfile = async (profile: Profile) => {
  await AsyncStorage.setItem('profile', JSON.stringify(profile));
};`,
        options: [
          "@expo/async-storage",
          "@react-native-async-storage/async-storage",
          "react-native-async-storage",
          "async-storage",
        ],
        correctAnswer: 1,
      },
      {
        id: "3-2-2",
        question:
          "O AsyncStorage funciona como chave-valor (similar a um dicion√°rio). Para SALVAR dados, usamos um m√©todo que recebe uma chave (identificador) e o valor. Qual √© o m√©todo correto?",
        code: `const saveProfile = async (profile: Profile) => {
  // Salvando com chave 'profile' e o valor do objeto
  await AsyncStorage.[BLANK]('profile', JSON.stringify(profile));
};`,
        options: ["setItem", "put", "save", "store"],
        correctAnswer: 0,
      },
      {
        id: "3-2-3",
        question:
          "O AsyncStorage s√≥ aceita STRINGS (texto) como valores. Mas nosso perfil √© um OBJETO JavaScript. Precisamos converter o objeto em texto antes de salvar. Qual fun√ß√£o JavaScript faz essa convers√£o?",
        code: `await AsyncStorage.setItem(
  'profile',
  [BLANK](profile)  // Converte objeto para string JSON
);`,
        options: ["serialize", "toString", "JSON.stringify", "JSON.parse"],
        correctAnswer: 2,
      },
    ],
  },
  {
    id: "3-3",
    courseId: "3",
    title: "AsyncStorage - Leitura",
    description: "Recupere dados armazenados",
    order: 3,
    questions: [
      {
        id: "3-3-1",
        question:
          "Agora precisamos LER os dados que foram salvos anteriormente. Quando o usu√°rio abre o app, buscamos o perfil dele no AsyncStorage usando a mesma chave ('profile') usada para salvar. Qual m√©todo usamos para recuperar dados?",
        code: `const loadProfile = async () => {
  // Busca dados pela chave 'profile'
  const data = await AsyncStorage.[BLANK]('profile');
  if (data) {
    setProfile(JSON.parse(data));
  }
};`,
        options: ["getItem", "read", "get", "load"],
        correctAnswer: 0,
      },
      {
        id: "3-3-2",
        question:
          "O AsyncStorage retorna os dados como STRING (texto). Mas precisamos de um OBJETO JavaScript para usar no app. Qual fun√ß√£o converte a string JSON de volta para objeto?",
        code: `const data = await AsyncStorage.getItem('profile');
if (data) {
  // Converte string JSON para objeto JavaScript
  const profile = [BLANK](data);
  setProfile(profile);
}`,
        options: ["fromJSON", "JSON.stringify", "JSON.parse", "parse"],
        correctAnswer: 2,
      },
      {
        id: "3-3-3",
        question:
          "Queremos carregar o perfil do usu√°rio AUTOMATICAMENTE quando a tela for aberta, n√£o esperar o usu√°rio clicar em algo. Qual Hook do React executa c√≥digo quando o componente √© montado (aparece na tela)?",
        code: `// Dentro do componente ProfileScreen
[BLANK](() => {
  loadProfile();  // Carrega dados ao abrir a tela
}, []);  // Array vazio = executa apenas uma vez`,
        options: ["useEffect", "useMount", "useCallback", "useMemo"],
        correctAnswer: 0,
      },
    ],
  },
  {
    id: "3-4",
    courseId: "3",
    title: "Edi√ß√£o de Perfil",
    description: "Implemente formul√°rio de edi√ß√£o",
    order: 4,
    questions: [
      {
        id: "3-4-1",
        question:
          "Para criar formul√°rios no React Native, usamos o componente TextInput. Um input 'controlado' significa que o React controla seu valor via estado (useState). Qual prop do TextInput define o texto exibido nele?",
        code: `// Input controlado: valor vem do estado 'name'
<TextInput
  [BLANK]={name}          // Mostra o valor atual
  onChangeText={setName}  // Atualiza quando usu√°rio digita
  placeholder="Nome"
/>`,
        options: ["content", "text", "input", "value"],
        correctAnswer: 3,
      },
      {
        id: "3-4-2",
        question:
          "Para facilitar a digita√ß√£o do e-mail (mostrando teclas como @ e .), queremos abrir o teclado adequado no TextInput. Qual prop define o tipo de teclado?",
        code: `<TextInput
  value={email}
  onChangeText={setEmail}
  [BLANK]="email-address"  // Teclado otimizado para e-mail
  placeholder="Seu e-mail"
/>`,
        options: ["textType", "inputType", "keyboardType", "type"],
        correctAnswer: 2,
      },
      {
        id: "3-4-3",
        question:
          "Ap√≥s o usu√°rio editar o perfil e clicar em 'Salvar', queremos: 1) Salvar no AsyncStorage, 2) Voltar para a tela anterior. O router do Expo oferece um m√©todo para voltar. Qual √©?",
        code: `const handleSave = async () => {
  await saveProfile({ name, email, bio });  // Salva dados
  router.[BLANK]();  // Volta para tela anterior
};`,
        options: ["goBack", "back", "pop", "return"],
        correctAnswer: 1,
      },
    ],
  },
  {
    id: "3-5",
    courseId: "3",
    title: "Service de Armazenamento",
    description: "Organize l√≥gica de persist√™ncia",
    order: 5,
    questions: [
      {
        id: "3-5-1",
        question:
          "Para organizar melhor o c√≥digo, criamos 'services' (servi√ßos) - arquivos que agrupam fun√ß√µes relacionadas. O service de profile ter√° fun√ß√µes de salvar, carregar e deletar. Como tornamos essas fun√ß√µes acess√≠veis em outros arquivos?",
        code: `const PROFILE_KEY = '@merge_skills:profile';

// Tornando a fun√ß√£o dispon√≠vel para import em outros arquivos
[BLANK] const saveProfile = async (profile: Profile) => {
  await AsyncStorage.setItem(PROFILE_KEY, JSON.stringify(profile));
};`,
        options: ["export", "async", "function", "const"],
        correctAnswer: 0,
      },
      {
        id: "3-5-2",
        question:
          "√Äs vezes precisamos DELETAR os dados salvos (ex: usu√°rio fez logout). O AsyncStorage tem um m√©todo espec√≠fico para remover um item pela chave. Qual √© o m√©todo correto?",
        code: `export const deleteProfile = async () => {
  // Remove dados da chave '@merge_skills:profile'
  await AsyncStorage.[BLANK](PROFILE_KEY);
};`,
        options: ["removeItem", "remove", "delete", "clear"],
        correctAnswer: 0,
      },
      {
        id: "3-5-3",
        question:
          "Criamos o service em '@/services/profileStorage.ts' (o @ √© um alias para a pasta src). Para usar as fun√ß√µes exportadas (saveProfile, loadProfile) em outro arquivo, qual o caminho correto de importa√ß√£o?",
        code: `// Importando m√∫ltiplas fun√ß√µes do service
import { saveProfile, loadProfile } from '[BLANK]';

export default function EditProfile() {
  // Agora podemos usar saveProfile() e loadProfile()
}`,
        options: [
          "@/storage/profile",
          "@/utils/storage",
          "@/profile/service",
          "@/services/profileStorage",
        ],
        correctAnswer: 3,
      },
    ],
  },

  // CURSO 4: Sistema de Cursos
  {
    id: "4-1",
    courseId: "4",
    title: "Tipos de Cursos e Li√ß√µes",
    description: "Defina estrutura de dados",
    order: 1,
    questions: [
      {
        id: "4-1-1",
        question:
          "Para tornar os cards de cursos mais visuais e f√°ceis de identificar, queremos adicionar um emoji para cada curso (üöÄ, üé®, üë§, etc). No TypeScript, qual tipo de dado usamos para armazenar um emoji ou qualquer texto?",
        code: `export interface Course {
  id: string;
  title: string;
  description: string;
  icon: [BLANK];          // Emoji do curso (ex: "üöÄ")
  color: string;
  totalLessons: number;
}`,
        options: ["emoji", "char", "string", "text"],
        correctAnswer: 2,
      },
      {
        id: "4-1-2",
        question:
          "Queremos armazenar uma LISTA de quest√µes em cada li√ß√£o. No TypeScript, para definir um array (lista) de objetos do tipo 'Question', adicionamos colchetes ap√≥s o tipo. Qual √© a sintaxe correta?",
        code: `export interface Lesson {
  id: string;
  courseId: string;
  title: string;
  questions: [BLANK];  // Array de quest√µes
}`,
        options: ["Question<>", "Array<Question>", "Question[]", "[Question]"],
        correctAnswer: 2,
      },
      {
        id: "4-1-3",
        question:
          "Cada quest√£o tem 4 op√ß√µes de resposta (√≠ndices 0, 1, 2, 3). Precisamos salvar qual √© a correta. Como o √≠ndice √© um n√∫mero (ex: 0 para primeira op√ß√£o), qual tipo usar para 'correctAnswer'?",
        code: `export interface Question {
  id: string;
  question: string;
  code: string;
  options: string[];      // ["op√ß√£o A", "op√ß√£o B", ...]
  correctAnswer: [BLANK]; // √çndice da resposta (0, 1, 2 ou 3)
}`,
        options: ["string", "number", "index", "boolean"],
        correctAnswer: 1,
      },
    ],
  },
  {
    id: "4-2",
    courseId: "4",
    title: "FlatList de Cursos",
    description: "Renderize lista otimizada",
    order: 2,
    questions: [
      {
        id: "4-2-1",
        question:
          "Para exibir uma lista de cursos na tela, precisamos de um componente otimizado que s√≥ renderiza itens vis√≠veis (economiza mem√≥ria). O React Native oferece um componente perfeito para listas grandes. Qual √©?",
        code: `import { [BLANK] } from 'react-native';

export default function Home() {
  return (
    <FlatList
      data={COURSES}         // Array de dados
      renderItem={renderCourse}  // Fun√ß√£o que renderiza cada item
    />
  );
}`,
        options: ["ScrollView", "FlatList", "ListView", "List"],
        correctAnswer: 1,
      },
      {
        id: "4-2-2",
        question:
          "A FlatList chama a fun√ß√£o 'renderItem' para cada curso. Essa fun√ß√£o recebe um objeto com informa√ß√µes do item. A propriedade principal que cont√©m o curso atual se chama 'item'. Como extra√≠mos ela via desestrutura√ß√£o?",
        code: `const renderCourse = ({ [BLANK] }: { item: Course }) => (
  <TouchableOpacity onPress={() => handlePress(item)}>
    <Card>{item.title}</Card>
  </TouchableOpacity>
);`,
        options: ["element", "item", "course", "data"],
        correctAnswer: 1,
      },
      {
        id: "4-2-3",
        question:
          "Para otimizar a performance, o React precisa identificar unicamente cada item da lista (para saber o que mudou). A FlatList tem uma prop que recebe uma fun√ß√£o que retorna uma chave √∫nica para cada item. Qual √© essa prop?",
        code: `<FlatList
  data={COURSES}
  renderItem={renderCourse}
  [BLANK]={(item) => item.id}  // Retorna ID √∫nico do curso
/>`,
        options: ["getKey", "keyExtractor", "key", "itemKey"],
        correctAnswer: 1,
      },
    ],
  },
  {
    id: "4-3",
    courseId: "4",
    title: "Filtrar Li√ß√µes por Curso",
    description: "Use filter e find",
    order: 3,
    questions: [
      {
        id: "4-3-1",
        question:
          "Quando o usu√°rio clica em um curso, navegamos para '/courses/123'. Precisamos buscar esse curso espec√≠fico no array COURSES. Arrays t√™m um m√©todo que retorna o PRIMEIRO elemento que atende √† condi√ß√£o. Qual m√©todo usar?",
        code: `const { id } = useLocalSearchParams();  // id = "123"
// Busca o curso com id = "123"
const course = COURSES.[BLANK](c => c.id === id);`,
        options: ["get", "find", "search", "filter"],
        correctAnswer: 1,
      },
      {
        id: "4-3-2",
        question:
          "Agora precisamos buscar TODAS as li√ß√µes que pertencem ao curso (n√£o apenas uma). Queremos um array com todas as li√ß√µes onde 'courseId' √© igual ao 'id' do curso. Qual m√©todo retorna array com TODOS os elementos que atendem √† condi√ß√£o?",
        code: `// Busca todas as li√ß√µes do curso e ordena
const courseLessons = LESSONS
  .[BLANK](l => l.courseId === id)  // Retorna array de li√ß√µes
  .sort((a, b) => a.order - b.order);`,
        options: ["where", "find", "select", "filter"],
        correctAnswer: 3,
      },
      {
        id: "4-3-3",
        question:
          "As li√ß√µes t√™m um campo 'order' (1, 2, 3...) para definir a sequ√™ncia. Precisamos ordenar o array pela ordem correta. Arrays t√™m um m√©todo que ordena baseado em uma fun√ß√£o de compara√ß√£o. Qual √©?",
        code: `const courseLessons = LESSONS
  .filter(l => l.courseId === id)
  .[BLANK]((a, b) => a.order - b.order);  // Ordena crescente por 'order'`,
        options: ["sort", "orderBy", "order", "sortBy"],
        correctAnswer: 0,
      },
    ],
  },
  {
    id: "4-4",
    courseId: "4",
    title: "Execu√ß√£o de Quest√µes",
    description: "Implemente l√≥gica de perguntas",
    order: 4,
    questions: [
      {
        id: "4-4-1",
        question:
          "Uma li√ß√£o tem v√°rias quest√µes que o usu√°rio responde uma por vez. Precisamos rastrear qual quest√£o est√° sendo exibida no momento (√≠ndice 0, 1, 2...). Qual Hook do React gerencia valores que mudam ao longo do tempo?",
        code: `// Come√ßa na quest√£o 0 (primeira)
const [currentQuestionIndex, setCurrentQuestionIndex] = [BLANK](0);`,
        options: ["createState", "state", "useRef", "useState"],
        correctAnswer: 3,
      },
      {
        id: "4-4-2",
        question:
          "Quando o usu√°rio clica em 'Verificar Resposta', comparamos a op√ß√£o selecionada com a resposta correta. A quest√£o tem uma propriedade que guarda o √≠ndice da resposta certa. Qual √© o nome dessa propriedade?",
        code: `const handleCheckAnswer = () => {
  // Compara op√ß√£o selecionada com a correta
  const correct = selectedOption === currentQuestion.[BLANK];
  setIsCorrect(correct);
};`,
        options: ["solution", "correctAnswer", "correct", "answer"],
        correctAnswer: 1,
      },
      {
        id: "4-4-3",
        question:
          "O c√≥digo das quest√µes tem lacunas marcadas com '[BLANK]' (ex: 'const x = [BLANK];'). Para mostrar isso visualmente, dividimos a string em partes sempre que encontramos '[BLANK]'. Qual m√©todo de string faz essa divis√£o?",
        code: `// Divide "const x = [BLANK];" em ["const x = ", ";"]
currentQuestion.code.[BLANK]('[BLANK]').map((part, index) => (
  <Text key={index}>{part}</Text>
))`,
        options: ["split", "separate", "divide", "cut"],
        correctAnswer: 0,
      },
    ],
  },
];
